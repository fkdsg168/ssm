<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 添加数据源 -->
    <!-- 配置数据源外部文件 -->
    <context:property-placeholder location="classpath*:mysql.properties"/>
    <!-- 数据源 -->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 配置扫描包
    <context:component-scan base-package="cn.lihui.service"></context:component-scan>-->

    <!-- 开启注解扫描:将扫描到的相关类，添加到ioc容器中-->
    <context:component-scan base-package="cn.lihui" ></context:component-scan>

    <!-- 若是不采用注解开发，需要添加这一部分 -->
    <!-- 配置AccountSerivce类
    <bean id="accountSerivce" class="cn.lihui.service.Impl.AccountSerivceImpl">-->
        <!-- set注入参数
        <property name="accountDao" ref="accountDao"></property>
        <property name="resultInfo" ref="resultInfo"></property>
    </bean> -->
    <!--配置Resultinfo返回值
    <bean id="resultInfo" class="cn.lihui.daomian.ResultInfo"></bean>-->

    <!--  -->
    <!-- 配置SqlSessionFactory工厂：SqlSessionFactoryBean来替代SqlSessionFactoryBuilder创建SqlSession -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="druidDataSource"></property>
        <!-- 若是采用配置文件的方式必须配置该配置文件 -->
        <!-- 添加Mybatis的配置文件
        <property name="configLocation" value="classpath:SqlMappingConfig.xml"></property> -->
    </bean>
    <!-- 注解形式扫描：配置AccountDao接口所在包-->
    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.lihui.dao"/>
    </bean>


    <!-- 事务的相关配置 -->
    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"></property>
    </bean>
    <!--配置事务通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="find*" read-only="true"/>
            <!-- <tx:method name="*" isolation="DEFAULT"/>-->
        </tx:attributes>
    </tx:advice>
    <!--配置AOP增强-->
    <aop:config>
        <aop:pointcut id="pt" expression="execution(* cn.lihui.service.Impl.*.*(..))"></aop:pointcut>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt"></aop:advisor>
    </aop:config>


</beans>